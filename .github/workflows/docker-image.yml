name: Docker Image CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Update Version
        run: |
          VERSION=$(cat version.txt)
          MAJOR_MINOR=$(echo $VERSION | awk -F'[-.]' '{print $1"."$2}')
          RC_VERSION=$(echo $VERSION | awk -F'[-.]' '{print $3}')
          if [ -z "$RC_VERSION" ]; then
            NEW_VERSION="${MAJOR_MINOR}-RC01"
          else
            NEW_RC_VERSION=$(printf "%02d" $((10#$RC_VERSION + 1)))
            NEW_VERSION="${MAJOR_MINOR}-RC${NEW_RC_VERSION}"
          fi
          echo $NEW_VERSION > version.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


        
      - name: Login to Github Packages
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u USERNAME --password-stdin docker.pkg.github.com

      - name: Determine Version
        run: echo ::set-output name=version::$(cat version.txt)
        id: get-version

      - name: Build the Docker Image
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/test:${{ steps.get-version.outputs.version }} .

      - name: Push the Docker Image
        run: docker push docker.pkg.github.com/${{ github.repository }}/test:${{ steps.get-version.outputs.version }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
      - name: Commit Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          git commit -a -m "Updated version number [skip ci]"
          git push
