name: Docker Image CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write

    steps:
      - uses: actions/checkout@v3

      
      - name: Update Version
        run: |
          VERSION=$(cat version.txt)
          
          NEW_VERSION=$(echo $VERSION | awk -F. '{printf("%d.%d.%d", $1,$2,$3+1)}')
          
          echo $NEW_VERSION > version.txt


      # - name: Update Version
      #   run: |
      #     VERSION=$(cat version.txt)
      #     MAJOR_MINOR=$(echo $VERSION | awk -F'-' '{print $1}')
      #     RC_VERSION=$(echo $VERSION | awk -F'-' '{print $2}')
          
      #     if [ -z "$RC_VERSION" ]; then
      #       NEW_VERSION="${MAJOR_MINOR}-RC01"
      #     else
      #       RC_NUMBER=$(echo $RC_VERSION | awk -F'RC' '{print $2}')
      #       NEXT_RC_NUMBER=$(printf "%02d" $((10#$RC_NUMBER + 1)))
      #       NEW_VERSION="${MAJOR_MINOR}-RC${NEXT_RC_NUMBER}"
      #     fi
          
      #     echo $NEW_VERSION > version.txt
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


        
      - name: Login to Github Packages
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u USERNAME --password-stdin docker.pkg.github.com

      - name: Determine Version
        run: echo ::set-output name=version::$(cat version.txt)
        id: get-version

      - name: Build the Docker Image
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/test:${{ steps.get-version.outputs.version }} .

      - name: Push the Docker Image
        run: docker push docker.pkg.github.com/${{ github.repository }}/test:${{ steps.get-version.outputs.version }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false

      # - uses: actions/delete-package-versions@v4
      #   with:
      #     package-name: 'image-delete/test'
      #     package-type: 'container'
      #     min-versions-to-keep: 3
      #     ignore-versions: '^(0|[1-9]\d*)\.0\.0(-RC[0-9]+)?$'
 